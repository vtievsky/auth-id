// Package serverhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package serverhttp

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for ResponseStatusErrorCode.
const (
	Error ResponseStatusErrorCode = "error"
)

// Defines values for ResponseStatusOkCode.
const (
	Ok ResponseStatusOkCode = "ok"
)

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	Blocked bool `json:"blocked"`

	// Description Описание роли
	Description string `json:"description"`

	// Name Название роли
	Name string `json:"name"`
}

// CreateRoleResponse200 defines model for CreateRoleResponse200.
type CreateRoleResponse200 struct {
	Data   Role             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// CreateRoleResponse500 defines model for CreateRoleResponse500.
type CreateRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Blocked bool `json:"blocked"`

	// Login login пользователя
	Login string `json:"login"`

	// Name Полное имя пользователя
	Name string `json:"name"`
}

// CreateUserResponse200 defines model for CreateUserResponse200.
type CreateUserResponse200 struct {
	Data   User             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// CreateUserResponse500 defines model for CreateUserResponse500.
type CreateUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteRoleResponse200 defines model for DeleteRoleResponse200.
type DeleteRoleResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteRoleResponse500 defines model for DeleteRoleResponse500.
type DeleteRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteUserResponse200 defines model for DeleteUserResponse200.
type DeleteUserResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteUserResponse500 defines model for DeleteUserResponse500.
type DeleteUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRoleResponse200 defines model for GetRoleResponse200.
type GetRoleResponse200 struct {
	Data   Role             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRoleResponse500 defines model for GetRoleResponse500.
type GetRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRolesResponse200 defines model for GetRolesResponse200.
type GetRolesResponse200 struct {
	Data   []Role           `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRolesResponse500 defines model for GetRolesResponse500.
type GetRolesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUserResponse200 defines model for GetUserResponse200.
type GetUserResponse200 struct {
	Data   User             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUserResponse500 defines model for GetUserResponse500.
type GetUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUsersResponse200 defines model for GetUsersResponse200.
type GetUsersResponse200 struct {
	Data   []User           `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUsersResponse500 defines model for GetUsersResponse500.
type GetUsersResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// ResponseStatusError defines model for ResponseStatusError.
type ResponseStatusError struct {
	Code        ResponseStatusErrorCode `json:"code"`
	Description string                  `json:"description"`
}

// ResponseStatusErrorCode defines model for ResponseStatusError.Code.
type ResponseStatusErrorCode string

// ResponseStatusOk defines model for ResponseStatusOk.
type ResponseStatusOk struct {
	Code        ResponseStatusOkCode `json:"code"`
	Description string               `json:"description"`
}

// ResponseStatusOkCode defines model for ResponseStatusOk.Code.
type ResponseStatusOkCode string

// Role defines model for Role.
type Role struct {
	Blocked     bool   `json:"blocked"`
	Code        string `json:"code"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	Blocked bool `json:"blocked"`

	// Description Описание роли
	Description string `json:"description"`

	// Name Название роли
	Name string `json:"name"`
}

// UpdateRoleResponse200 defines model for UpdateRoleResponse200.
type UpdateRoleResponse200 struct {
	Data   Role             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// UpdateRoleResponse500 defines model for UpdateRoleResponse500.
type UpdateRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Blocked bool `json:"blocked"`

	// Name Полное имя пользователя
	Name string `json:"name"`
}

// UpdateUserResponse200 defines model for UpdateUserResponse200.
type UpdateUserResponse200 struct {
	Data   User             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// UpdateUserResponse500 defines model for UpdateUserResponse500.
type UpdateUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// User defines model for User.
type User struct {
	Blocked bool   `json:"blocked"`
	Login   string `json:"login"`
	Name    string `json:"name"`
}

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequest

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRoleRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/roles)
	GetRoles(ctx echo.Context) error

	// (POST /v1/roles)
	CreateRole(ctx echo.Context) error

	// (DELETE /v1/roles/{code})
	DeleteRole(ctx echo.Context, code string) error

	// (GET /v1/roles/{code})
	GetRole(ctx echo.Context, code string) error

	// (PUT /v1/roles/{code})
	UpdateRole(ctx echo.Context, code string) error

	// (GET /v1/users)
	GetUsers(ctx echo.Context) error

	// (POST /v1/users)
	CreateUser(ctx echo.Context) error

	// (DELETE /v1/users/{login})
	DeleteUser(ctx echo.Context, login string) error

	// (GET /v1/users/{login})
	GetUser(ctx echo.Context, login string) error

	// (PUT /v1/users/{login})
	UpdateUser(ctx echo.Context, login string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoles(ctx)
	return err
}

// CreateRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRole(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRole(ctx)
	return err
}

// DeleteRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRole(ctx, code)
	return err
}

// GetRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRole(ctx, code)
	return err
}

// UpdateRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRole(ctx, code)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, login)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, login)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, login)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/roles", wrapper.GetRoles)
	router.POST(baseURL+"/v1/roles", wrapper.CreateRole)
	router.DELETE(baseURL+"/v1/roles/:code", wrapper.DeleteRole)
	router.GET(baseURL+"/v1/roles/:code", wrapper.GetRole)
	router.PUT(baseURL+"/v1/roles/:code", wrapper.UpdateRole)
	router.GET(baseURL+"/v1/users", wrapper.GetUsers)
	router.POST(baseURL+"/v1/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/v1/users/:login", wrapper.DeleteUser)
	router.GET(baseURL+"/v1/users/:login", wrapper.GetUser)
	router.PUT(baseURL+"/v1/users/:login", wrapper.UpdateUser)

}

type GetRolesRequestObject struct {
}

type GetRolesResponseObject interface {
	VisitGetRolesResponse(w http.ResponseWriter) error
}

type GetRoles200JSONResponse GetRolesResponse200

func (response GetRoles200JSONResponse) VisitGetRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoles500JSONResponse GetRolesResponse500

func (response GetRoles500JSONResponse) VisitGetRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateRoleRequestObject struct {
	Body *CreateRoleJSONRequestBody
}

type CreateRoleResponseObject interface {
	VisitCreateRoleResponse(w http.ResponseWriter) error
}

type CreateRole200JSONResponse CreateRoleResponse200

func (response CreateRole200JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole500JSONResponse CreateRoleResponse500

func (response CreateRole500JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoleRequestObject struct {
	Code string `json:"code"`
}

type DeleteRoleResponseObject interface {
	VisitDeleteRoleResponse(w http.ResponseWriter) error
}

type DeleteRole200JSONResponse DeleteRoleResponse200

func (response DeleteRole200JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole500JSONResponse DeleteRoleResponse500

func (response DeleteRole500JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRoleRequestObject struct {
	Code string `json:"code"`
}

type GetRoleResponseObject interface {
	VisitGetRoleResponse(w http.ResponseWriter) error
}

type GetRole200JSONResponse GetRoleResponse200

func (response GetRole200JSONResponse) VisitGetRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRole500JSONResponse GetRoleResponse500

func (response GetRole500JSONResponse) VisitGetRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoleRequestObject struct {
	Code string `json:"code"`
	Body *UpdateRoleJSONRequestBody
}

type UpdateRoleResponseObject interface {
	VisitUpdateRoleResponse(w http.ResponseWriter) error
}

type UpdateRole200JSONResponse UpdateRoleResponse200

func (response UpdateRole200JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole500JSONResponse UpdateRoleResponse500

func (response UpdateRole500JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse GetUsersResponse200

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse GetUsersResponse500

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser200JSONResponse CreateUserResponse200

func (response CreateUser200JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse CreateUserResponse500

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	Login string `json:"login"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200JSONResponse DeleteUserResponse200

func (response DeleteUser200JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser500JSONResponse DeleteUserResponse500

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
	Login string `json:"login"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse GetUserResponse200

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser500JSONResponse GetUserResponse500

func (response GetUser500JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	Login string `json:"login"`
	Body  *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse UpdateUserResponse200

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser500JSONResponse UpdateUserResponse500

func (response UpdateUser500JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /v1/roles)
	GetRoles(ctx context.Context, request GetRolesRequestObject) (GetRolesResponseObject, error)

	// (POST /v1/roles)
	CreateRole(ctx context.Context, request CreateRoleRequestObject) (CreateRoleResponseObject, error)

	// (DELETE /v1/roles/{code})
	DeleteRole(ctx context.Context, request DeleteRoleRequestObject) (DeleteRoleResponseObject, error)

	// (GET /v1/roles/{code})
	GetRole(ctx context.Context, request GetRoleRequestObject) (GetRoleResponseObject, error)

	// (PUT /v1/roles/{code})
	UpdateRole(ctx context.Context, request UpdateRoleRequestObject) (UpdateRoleResponseObject, error)

	// (GET /v1/users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)

	// (POST /v1/users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)

	// (DELETE /v1/users/{login})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)

	// (GET /v1/users/{login})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)

	// (PUT /v1/users/{login})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetRoles operation middleware
func (sh *strictHandler) GetRoles(ctx echo.Context) error {
	var request GetRolesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoles(ctx.Request().Context(), request.(GetRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRolesResponseObject); ok {
		return validResponse.VisitGetRolesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateRole operation middleware
func (sh *strictHandler) CreateRole(ctx echo.Context) error {
	var request CreateRoleRequestObject

	var body CreateRoleJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRole(ctx.Request().Context(), request.(CreateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateRoleResponseObject); ok {
		return validResponse.VisitCreateRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRole operation middleware
func (sh *strictHandler) DeleteRole(ctx echo.Context, code string) error {
	var request DeleteRoleRequestObject

	request.Code = code

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRole(ctx.Request().Context(), request.(DeleteRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRoleResponseObject); ok {
		return validResponse.VisitDeleteRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRole operation middleware
func (sh *strictHandler) GetRole(ctx echo.Context, code string) error {
	var request GetRoleRequestObject

	request.Code = code

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRole(ctx.Request().Context(), request.(GetRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRoleResponseObject); ok {
		return validResponse.VisitGetRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateRole operation middleware
func (sh *strictHandler) UpdateRole(ctx echo.Context, code string) error {
	var request UpdateRoleRequestObject

	request.Code = code

	var body UpdateRoleJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRole(ctx.Request().Context(), request.(UpdateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRoleResponseObject); ok {
		return validResponse.VisitUpdateRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx echo.Context) error {
	var request GetUsersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.Request().Context(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		return validResponse.VisitGetUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx echo.Context) error {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.Request().Context(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		return validResponse.VisitCreateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx echo.Context, login string) error {
	var request DeleteUserRequestObject

	request.Login = login

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx.Request().Context(), request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		return validResponse.VisitDeleteUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx echo.Context, login string) error {
	var request GetUserRequestObject

	request.Login = login

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.Request().Context(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		return validResponse.VisitGetUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx echo.Context, login string) error {
	var request UpdateUserRequestObject

	request.Login = login

	var body UpdateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.Request().Context(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		return validResponse.VisitUpdateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9yZz04jxxPHX8Xq3+/oYEjExbf8U4RyIFq0J+TDYBcwy3hmtruHCKGRFsgqB6JwjfJv",
	"FeUFvLtYeBdsXqH6jaLqGXtsTxuPCTNj5wS2eqqry5+u+lbNKWt6bd9zwZWC1U+ZaB5C29L/fsnBkvDM",
	"c+AZvAxASPrS554PXNqgl+w5XvMIWvRvC/atwJGsLnkAVSZPfGB1tud5DlguC6usBaLJbV/anhutH/vI",
	"8E+8x546ww72sYfdinqFA7zFHhuZEpLb7gFZcq02GEz8gR28wXcZTIRVxuFlYHNyfTeyN+lgdXS0xuhp",
	"b+8FNCU5MB4Z4XuugE/X19PRaVnSor//57DP6ux/tSTUtTjONTJCJoW0ZCDmro6329Grt49SR4nNVKO9",
	"s/m+afL9Mf58zbnHZ7k025fnAviTEOZ4B7aBLf11Be+JBvUT3uCAIFHn2MVbdbUAYG80T30cYLeCPbxT",
	"VwtYNTMXuZyFtihK/5I2MlICbeO+l0fbV+BAhlv7tLHJ5kjZQZkLV1FBWQ5SvgG5msl9yvHSIygyhdCW",
	"0BZZYxlvZXFunZQRW7EUwV3NajDleOkRfEI8h7EsE8+JI5UXXNPjKU+aXktLLHCDNtkDvaxhEGNTfcPD",
	"skqbnXxmvovbR/P9846Kc44y3UNCOK18h94u6F+idDM5vnCf9NxvLdBB/qdbxvFQrJqqSPteXnKJfMna",
	"MqaRKq61m0/DahbxtO8l0kCHXwyA0ZDgkbkwc+NOvwk0A27Lkx06bewbWDzyWYdAOxd9NTJwKKXPQnre",
	"dve9qBi50moS6tNJkeHv2FXnOMBrdVnBawKUslgH3+JAnavLijqrfP7dVgXfYRffqtfqAj8Sz7SdLR2t",
	"VQJ5+IndomWsyo6Bi8j0xto6hcXzwbV8m9XZZ2vraxusynxLHurD1I43apw0MX04ADnrYqkL9SN2hzn2",
	"LM7bH7EzTLhd/MD0TtyiB7darD7S24ziH1Gi94lvCsUEXL2l5fuO3dRP1l6IqFZEgM3Dz9Sm6MhPnmL7",
	"WwrEZo4bb5o33nIlcNdyKjvAj4FXkgsyRIvVdxOodhshcWgdCCL1e9hjjbDKfE+Yfpm/cIA3eG2qfZM/",
	"RDIxZNFVACG/8FonTxaM9KDZEAp8gx0N9h0Br14R7jfYwXvym1QAG7+nkgcQ5giOeQJcCDrmAW4+8ITV",
	"5I7XTkkGhhFJDkhTGf1b83Sb3PVZTCUjMJ1PuNUGCVxoh6Zs/krJraIuItPqCrt4hwP8MG6cMrpOS0OV",
	"Wh9q1kkkqmMxnk7zjRxxMY8eC8HFPGzMK9dkLQJx3umrS/V6NiVxlsyKyOrwYBgwFll2Cqk6gYmEX/CG",
	"Ejj256eIpOvI+Ptjb2g85yTx9BUw3SgvfQU0N7SFUGzuR3OtgIHQ6D1S5ZpbyVmqV4/xcla9qelnUekn",
	"NaMsWfU+0OWbVLBuOPNUweOTjRVRwdNjjAJV8PQUIv8cUDvVnf9iMjgzZMlL0Lk17zcc4HvsYT8tjd/j",
	"4KEtDXVwOM1YJrVcClbmt9BLpZYzwxRn2wVIWmVoDC9Fi6xpyySpMxOSjHIXgSQtswtLOHkp75WquuaX",
	"BwUq74Kqrl5MT0dABtxhdVZjYyvTd0HL7phDdaF+VufqTF2NBuM/6Hawr9nsU1ZNiKRNw0b4TwAAAP//",
	"TvuNLhArAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

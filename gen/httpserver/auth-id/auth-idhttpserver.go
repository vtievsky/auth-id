// Package serverhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package serverhttp

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for ResponseStatusErrorCode.
const (
	Error ResponseStatusErrorCode = "error"
)

// Defines values for ResponseStatusOkCode.
const (
	Ok ResponseStatusOkCode = "ok"
)

// AddRolePrivilegeRequest defines model for AddRolePrivilegeRequest.
type AddRolePrivilegeRequest struct {
	Allowed bool `json:"allowed"`
}

// AddRolePrivilegeResponse200 defines model for AddRolePrivilegeResponse200.
type AddRolePrivilegeResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// AddRolePrivilegeResponse500 defines model for AddRolePrivilegeResponse500.
type AddRolePrivilegeResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// AddRoleUserRequest defines model for AddRoleUserRequest.
type AddRoleUserRequest struct {
	DateIn  openapi_types.Date `json:"date_in"`
	DateOut openapi_types.Date `json:"date_out"`
}

// AddRoleUserResponse200 defines model for AddRoleUserResponse200.
type AddRoleUserResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// AddRoleUserResponse500 defines model for AddRoleUserResponse500.
type AddRoleUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// ChangePassRequest defines model for ChangePassRequest.
type ChangePassRequest struct {
	// Changed Новый пароль
	Changed string `json:"changed"`

	// Current Текущий пароль
	Current string `json:"current"`
}

// ChangePassResponse200 defines model for ChangePassResponse200.
type ChangePassResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// ChangePassResponse500 defines model for ChangePassResponse500.
type ChangePassResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	Blocked bool `json:"blocked"`

	// Description Описание роли
	Description string `json:"description"`

	// Name Название роли
	Name string `json:"name"`
}

// CreateRoleResponse200 defines model for CreateRoleResponse200.
type CreateRoleResponse200 struct {
	Data   Role             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// CreateRoleResponse500 defines model for CreateRoleResponse500.
type CreateRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Blocked bool `json:"blocked"`

	// Login login пользователя
	Login string `json:"login"`

	// Name Полное имя пользователя
	Name string `json:"name"`

	// Password Пароль пользователя
	Password string `json:"password"`
}

// CreateUserResponse200 defines model for CreateUserResponse200.
type CreateUserResponse200 struct {
	Data   User             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// CreateUserResponse500 defines model for CreateUserResponse500.
type CreateUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteRolePrivilegeResponse200 defines model for DeleteRolePrivilegeResponse200.
type DeleteRolePrivilegeResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteRolePrivilegeResponse500 defines model for DeleteRolePrivilegeResponse500.
type DeleteRolePrivilegeResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteRoleResponse200 defines model for DeleteRoleResponse200.
type DeleteRoleResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteRoleResponse500 defines model for DeleteRoleResponse500.
type DeleteRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteRoleUserResponse200 defines model for DeleteRoleUserResponse200.
type DeleteRoleUserResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteRoleUserResponse500 defines model for DeleteRoleUserResponse500.
type DeleteRoleUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteUserResponse200 defines model for DeleteUserResponse200.
type DeleteUserResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteUserResponse500 defines model for DeleteUserResponse500.
type DeleteUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteUserSessionResponse200 defines model for DeleteUserSessionResponse200.
type DeleteUserSessionResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteUserSessionResponse500 defines model for DeleteUserSessionResponse500.
type DeleteUserSessionResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRolePrivilegesResponse200 defines model for GetRolePrivilegesResponse200.
type GetRolePrivilegesResponse200 struct {
	Data   []RolePrivilege  `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRolePrivilegesResponse500 defines model for GetRolePrivilegesResponse500.
type GetRolePrivilegesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRoleResponse200 defines model for GetRoleResponse200.
type GetRoleResponse200 struct {
	Data   Role             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRoleResponse500 defines model for GetRoleResponse500.
type GetRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRoleUsersResponse200 defines model for GetRoleUsersResponse200.
type GetRoleUsersResponse200 struct {
	Data   []RoleUser       `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRoleUsersResponse500 defines model for GetRoleUsersResponse500.
type GetRoleUsersResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRolesResponse200 defines model for GetRolesResponse200.
type GetRolesResponse200 struct {
	Data   []Role           `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRolesResponse500 defines model for GetRolesResponse500.
type GetRolesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUserPrivilegesResponse200 defines model for GetUserPrivilegesResponse200.
type GetUserPrivilegesResponse200 struct {
	Data   []UserPrivilege  `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUserPrivilegesResponse500 defines model for GetUserPrivilegesResponse500.
type GetUserPrivilegesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUserResponse200 defines model for GetUserResponse200.
type GetUserResponse200 struct {
	Data   User             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUserResponse500 defines model for GetUserResponse500.
type GetUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUserRolesResponse200 defines model for GetUserRolesResponse200.
type GetUserRolesResponse200 struct {
	Data   []UserRole       `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUserRolesResponse500 defines model for GetUserRolesResponse500.
type GetUserRolesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUserSessionsResponse200 defines model for GetUserSessionsResponse200.
type GetUserSessionsResponse200 struct {
	Data   []Session        `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUserSessionsResponse500 defines model for GetUserSessionsResponse500.
type GetUserSessionsResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUsersResponse200 defines model for GetUsersResponse200.
type GetUsersResponse200 struct {
	Data   []User           `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUsersResponse500 defines model for GetUsersResponse500.
type GetUsersResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Password Пароль
	Password string `json:"password"`
}

// LoginResponse200 defines model for LoginResponse200.
type LoginResponse200 struct {
	Data   ResponseAccess   `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// LoginResponse500 defines model for LoginResponse500.
type LoginResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// ResetPassRequest defines model for ResetPassRequest.
type ResetPassRequest struct {
	// Changed Новый пароль
	Changed string `json:"changed"`
}

// ResetPassResponse200 defines model for ResetPassResponse200.
type ResetPassResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// ResetPassResponse500 defines model for ResetPassResponse500.
type ResetPassResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// ResponseAccess defines model for ResponseAccess.
type ResponseAccess struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

// ResponseStatusError defines model for ResponseStatusError.
type ResponseStatusError struct {
	Code        ResponseStatusErrorCode `json:"code"`
	Description string                  `json:"description"`
}

// ResponseStatusErrorCode defines model for ResponseStatusError.Code.
type ResponseStatusErrorCode string

// ResponseStatusOk defines model for ResponseStatusOk.
type ResponseStatusOk struct {
	Code        ResponseStatusOkCode `json:"code"`
	Description string               `json:"description"`
}

// ResponseStatusOkCode defines model for ResponseStatusOk.Code.
type ResponseStatusOkCode string

// Role defines model for Role.
type Role struct {
	Blocked     bool   `json:"blocked"`
	Code        string `json:"code"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// RolePrivilege defines model for RolePrivilege.
type RolePrivilege struct {
	Allowed     bool   `json:"allowed"`
	Code        string `json:"code"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// RoleUser defines model for RoleUser.
type RoleUser struct {
	DateIn  openapi_types.Date `json:"date_in"`
	DateOut openapi_types.Date `json:"date_out"`
	Login   string             `json:"login"`
	Name    string             `json:"name"`
}

// Session defines model for Session.
type Session struct {
	// CreatedAt Время создания сессии
	CreatedAt time.Time `json:"created_at"`

	// ExpiredAt Время истечения срока действия сессии
	ExpiredAt time.Time `json:"expired_at"`

	// Id Идентификатор сессии
	Id string `json:"id"`
}

// UpdateRolePrivilegeRequest defines model for UpdateRolePrivilegeRequest.
type UpdateRolePrivilegeRequest struct {
	Allowed bool `json:"allowed"`
}

// UpdateRolePrivilegeResponse200 defines model for UpdateRolePrivilegeResponse200.
type UpdateRolePrivilegeResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// UpdateRolePrivilegeResponse500 defines model for UpdateRolePrivilegeResponse500.
type UpdateRolePrivilegeResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	Blocked bool `json:"blocked"`

	// Description Описание роли
	Description string `json:"description"`

	// Name Название роли
	Name string `json:"name"`
}

// UpdateRoleResponse200 defines model for UpdateRoleResponse200.
type UpdateRoleResponse200 struct {
	Data   Role             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// UpdateRoleResponse500 defines model for UpdateRoleResponse500.
type UpdateRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// UpdateRoleUserRequest defines model for UpdateRoleUserRequest.
type UpdateRoleUserRequest struct {
	DateIn  openapi_types.Date `json:"date_in"`
	DateOut openapi_types.Date `json:"date_out"`
}

// UpdateRoleUserResponse200 defines model for UpdateRoleUserResponse200.
type UpdateRoleUserResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// UpdateRoleUserResponse500 defines model for UpdateRoleUserResponse500.
type UpdateRoleUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Blocked bool `json:"blocked"`

	// Name Полное имя пользователя
	Name string `json:"name"`
}

// UpdateUserResponse200 defines model for UpdateUserResponse200.
type UpdateUserResponse200 struct {
	Data   User             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// UpdateUserResponse500 defines model for UpdateUserResponse500.
type UpdateUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// User defines model for User.
type User struct {
	Blocked bool   `json:"blocked"`
	Login   string `json:"login"`
	Name    string `json:"name"`
}

// UserPrivilege defines model for UserPrivilege.
type UserPrivilege struct {
	Code        string             `json:"code"`
	DateIn      openapi_types.Date `json:"date_in"`
	DateOut     openapi_types.Date `json:"date_out"`
	Description string             `json:"description"`
	Name        string             `json:"name"`
}

// UserRole defines model for UserRole.
type UserRole struct {
	Code        string             `json:"code"`
	DateIn      openapi_types.Date `json:"date_in"`
	DateOut     openapi_types.Date `json:"date_out"`
	Description string             `json:"description"`
	Name        string             `json:"name"`
}

// ChangePassJSONRequestBody defines body for ChangePass for application/json ContentType.
type ChangePassJSONRequestBody = ChangePassRequest

// ResetPassJSONRequestBody defines body for ResetPass for application/json ContentType.
type ResetPassJSONRequestBody = ResetPassRequest

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequest

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRoleRequest

// AddRolePrivilegeJSONRequestBody defines body for AddRolePrivilege for application/json ContentType.
type AddRolePrivilegeJSONRequestBody = AddRolePrivilegeRequest

// UpdateRolePrivilegeJSONRequestBody defines body for UpdateRolePrivilege for application/json ContentType.
type UpdateRolePrivilegeJSONRequestBody = UpdateRolePrivilegeRequest

// AddRoleUserJSONRequestBody defines body for AddRoleUser for application/json ContentType.
type AddRoleUserJSONRequestBody = AddRoleUserRequest

// UpdateRoleUserJSONRequestBody defines body for UpdateRoleUser for application/json ContentType.
type UpdateRoleUserJSONRequestBody = UpdateRoleUserRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (PUT /v1/passchanges/{login})
	ChangePass(ctx echo.Context, login string) error

	// (PUT /v1/passresets/{login})
	ResetPass(ctx echo.Context, login string) error

	// (GET /v1/roles)
	GetRoles(ctx echo.Context) error

	// (POST /v1/roles)
	CreateRole(ctx echo.Context) error

	// (DELETE /v1/roles/{code})
	DeleteRole(ctx echo.Context, code string) error

	// (GET /v1/roles/{code})
	GetRole(ctx echo.Context, code string) error

	// (PUT /v1/roles/{code})
	UpdateRole(ctx echo.Context, code string) error

	// (GET /v1/roles/{code}/privileges)
	GetRolePrivileges(ctx echo.Context, code string) error

	// (GET /v1/roles/{code}/users)
	GetRoleUsers(ctx echo.Context, code string) error

	// (DELETE /v1/roles/{role_code}/privileges/{privilege_code})
	DeleteRolePrivilege(ctx echo.Context, roleCode string, privilegeCode string) error

	// (POST /v1/roles/{role_code}/privileges/{privilege_code})
	AddRolePrivilege(ctx echo.Context, roleCode string, privilegeCode string) error

	// (PUT /v1/roles/{role_code}/privileges/{privilege_code})
	UpdateRolePrivilege(ctx echo.Context, roleCode string, privilegeCode string) error

	// (DELETE /v1/roles/{role_code}/users/{login})
	DeleteRoleUser(ctx echo.Context, roleCode string, login string) error

	// (POST /v1/roles/{role_code}/users/{login})
	AddRoleUser(ctx echo.Context, roleCode string, login string) error

	// (PUT /v1/roles/{role_code}/users/{login})
	UpdateRoleUser(ctx echo.Context, roleCode string, login string) error

	// (GET /v1/users)
	GetUsers(ctx echo.Context) error

	// (POST /v1/users)
	CreateUser(ctx echo.Context) error

	// (DELETE /v1/users/{login})
	DeleteUser(ctx echo.Context, login string) error

	// (GET /v1/users/{login})
	GetUser(ctx echo.Context, login string) error

	// (PUT /v1/users/{login})
	UpdateUser(ctx echo.Context, login string) error

	// (GET /v1/users/{login}/privileges)
	GetUserPrivileges(ctx echo.Context, login string) error

	// (GET /v1/users/{login}/roles)
	GetUserRoles(ctx echo.Context, login string) error

	// (GET /v1/users/{login}/sessions)
	GetUserSessions(ctx echo.Context, login string) error

	// (POST /v1/users/{login}/sessions)
	Login(ctx echo.Context, login string) error

	// (DELETE /v1/users/{login}/sessions/{session_id})
	DeleteUserSession(ctx echo.Context, login string, sessionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ChangePass converts echo context to params.
func (w *ServerInterfaceWrapper) ChangePass(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChangePass(ctx, login)
	return err
}

// ResetPass converts echo context to params.
func (w *ServerInterfaceWrapper) ResetPass(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResetPass(ctx, login)
	return err
}

// GetRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoles(ctx)
	return err
}

// CreateRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRole(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRole(ctx)
	return err
}

// DeleteRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRole(ctx, code)
	return err
}

// GetRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRole(ctx, code)
	return err
}

// UpdateRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRole(ctx, code)
	return err
}

// GetRolePrivileges converts echo context to params.
func (w *ServerInterfaceWrapper) GetRolePrivileges(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRolePrivileges(ctx, code)
	return err
}

// GetRoleUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoleUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoleUsers(ctx, code)
	return err
}

// DeleteRolePrivilege converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRolePrivilege(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "privilege_code" -------------
	var privilegeCode string

	err = runtime.BindStyledParameterWithOptions("simple", "privilege_code", ctx.Param("privilege_code"), &privilegeCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter privilege_code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRolePrivilege(ctx, roleCode, privilegeCode)
	return err
}

// AddRolePrivilege converts echo context to params.
func (w *ServerInterfaceWrapper) AddRolePrivilege(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "privilege_code" -------------
	var privilegeCode string

	err = runtime.BindStyledParameterWithOptions("simple", "privilege_code", ctx.Param("privilege_code"), &privilegeCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter privilege_code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddRolePrivilege(ctx, roleCode, privilegeCode)
	return err
}

// UpdateRolePrivilege converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRolePrivilege(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "privilege_code" -------------
	var privilegeCode string

	err = runtime.BindStyledParameterWithOptions("simple", "privilege_code", ctx.Param("privilege_code"), &privilegeCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter privilege_code: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRolePrivilege(ctx, roleCode, privilegeCode)
	return err
}

// DeleteRoleUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRoleUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRoleUser(ctx, roleCode, login)
	return err
}

// AddRoleUser converts echo context to params.
func (w *ServerInterfaceWrapper) AddRoleUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddRoleUser(ctx, roleCode, login)
	return err
}

// UpdateRoleUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRoleUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRoleUser(ctx, roleCode, login)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, login)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, login)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, login)
	return err
}

// GetUserPrivileges converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserPrivileges(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserPrivileges(ctx, login)
	return err
}

// GetUserRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserRoles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserRoles(ctx, login)
	return err
}

// GetUserSessions converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserSessions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserSessions(ctx, login)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx, login)
	return err
}

// DeleteUserSession converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", ctx.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter session_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUserSession(ctx, login, sessionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/v1/passchanges/:login", wrapper.ChangePass)
	router.PUT(baseURL+"/v1/passresets/:login", wrapper.ResetPass)
	router.GET(baseURL+"/v1/roles", wrapper.GetRoles)
	router.POST(baseURL+"/v1/roles", wrapper.CreateRole)
	router.DELETE(baseURL+"/v1/roles/:code", wrapper.DeleteRole)
	router.GET(baseURL+"/v1/roles/:code", wrapper.GetRole)
	router.PUT(baseURL+"/v1/roles/:code", wrapper.UpdateRole)
	router.GET(baseURL+"/v1/roles/:code/privileges", wrapper.GetRolePrivileges)
	router.GET(baseURL+"/v1/roles/:code/users", wrapper.GetRoleUsers)
	router.DELETE(baseURL+"/v1/roles/:role_code/privileges/:privilege_code", wrapper.DeleteRolePrivilege)
	router.POST(baseURL+"/v1/roles/:role_code/privileges/:privilege_code", wrapper.AddRolePrivilege)
	router.PUT(baseURL+"/v1/roles/:role_code/privileges/:privilege_code", wrapper.UpdateRolePrivilege)
	router.DELETE(baseURL+"/v1/roles/:role_code/users/:login", wrapper.DeleteRoleUser)
	router.POST(baseURL+"/v1/roles/:role_code/users/:login", wrapper.AddRoleUser)
	router.PUT(baseURL+"/v1/roles/:role_code/users/:login", wrapper.UpdateRoleUser)
	router.GET(baseURL+"/v1/users", wrapper.GetUsers)
	router.POST(baseURL+"/v1/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/v1/users/:login", wrapper.DeleteUser)
	router.GET(baseURL+"/v1/users/:login", wrapper.GetUser)
	router.PUT(baseURL+"/v1/users/:login", wrapper.UpdateUser)
	router.GET(baseURL+"/v1/users/:login/privileges", wrapper.GetUserPrivileges)
	router.GET(baseURL+"/v1/users/:login/roles", wrapper.GetUserRoles)
	router.GET(baseURL+"/v1/users/:login/sessions", wrapper.GetUserSessions)
	router.POST(baseURL+"/v1/users/:login/sessions", wrapper.Login)
	router.DELETE(baseURL+"/v1/users/:login/sessions/:session_id", wrapper.DeleteUserSession)

}

type ChangePassRequestObject struct {
	Login string `json:"login"`
	Body  *ChangePassJSONRequestBody
}

type ChangePassResponseObject interface {
	VisitChangePassResponse(w http.ResponseWriter) error
}

type ChangePass200JSONResponse ChangePassResponse200

func (response ChangePass200JSONResponse) VisitChangePassResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangePass500JSONResponse ChangePassResponse500

func (response ChangePass500JSONResponse) VisitChangePassResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ResetPassRequestObject struct {
	Login string `json:"login"`
	Body  *ResetPassJSONRequestBody
}

type ResetPassResponseObject interface {
	VisitResetPassResponse(w http.ResponseWriter) error
}

type ResetPass200JSONResponse ResetPassResponse200

func (response ResetPass200JSONResponse) VisitResetPassResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ResetPass500JSONResponse ResetPassResponse500

func (response ResetPass500JSONResponse) VisitResetPassResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRolesRequestObject struct {
}

type GetRolesResponseObject interface {
	VisitGetRolesResponse(w http.ResponseWriter) error
}

type GetRoles200JSONResponse GetRolesResponse200

func (response GetRoles200JSONResponse) VisitGetRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoles500JSONResponse GetRolesResponse500

func (response GetRoles500JSONResponse) VisitGetRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateRoleRequestObject struct {
	Body *CreateRoleJSONRequestBody
}

type CreateRoleResponseObject interface {
	VisitCreateRoleResponse(w http.ResponseWriter) error
}

type CreateRole200JSONResponse CreateRoleResponse200

func (response CreateRole200JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole500JSONResponse CreateRoleResponse500

func (response CreateRole500JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoleRequestObject struct {
	Code string `json:"code"`
}

type DeleteRoleResponseObject interface {
	VisitDeleteRoleResponse(w http.ResponseWriter) error
}

type DeleteRole200JSONResponse DeleteRoleResponse200

func (response DeleteRole200JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole500JSONResponse DeleteRoleResponse500

func (response DeleteRole500JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRoleRequestObject struct {
	Code string `json:"code"`
}

type GetRoleResponseObject interface {
	VisitGetRoleResponse(w http.ResponseWriter) error
}

type GetRole200JSONResponse GetRoleResponse200

func (response GetRole200JSONResponse) VisitGetRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRole500JSONResponse GetRoleResponse500

func (response GetRole500JSONResponse) VisitGetRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoleRequestObject struct {
	Code string `json:"code"`
	Body *UpdateRoleJSONRequestBody
}

type UpdateRoleResponseObject interface {
	VisitUpdateRoleResponse(w http.ResponseWriter) error
}

type UpdateRole200JSONResponse UpdateRoleResponse200

func (response UpdateRole200JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole500JSONResponse UpdateRoleResponse500

func (response UpdateRole500JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRolePrivilegesRequestObject struct {
	Code string `json:"code"`
}

type GetRolePrivilegesResponseObject interface {
	VisitGetRolePrivilegesResponse(w http.ResponseWriter) error
}

type GetRolePrivileges200JSONResponse GetRolePrivilegesResponse200

func (response GetRolePrivileges200JSONResponse) VisitGetRolePrivilegesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRolePrivileges500JSONResponse GetRolePrivilegesResponse500

func (response GetRolePrivileges500JSONResponse) VisitGetRolePrivilegesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRoleUsersRequestObject struct {
	Code string `json:"code"`
}

type GetRoleUsersResponseObject interface {
	VisitGetRoleUsersResponse(w http.ResponseWriter) error
}

type GetRoleUsers200JSONResponse GetRoleUsersResponse200

func (response GetRoleUsers200JSONResponse) VisitGetRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoleUsers500JSONResponse GetRoleUsersResponse500

func (response GetRoleUsers500JSONResponse) VisitGetRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRolePrivilegeRequestObject struct {
	RoleCode      string `json:"role_code"`
	PrivilegeCode string `json:"privilege_code"`
}

type DeleteRolePrivilegeResponseObject interface {
	VisitDeleteRolePrivilegeResponse(w http.ResponseWriter) error
}

type DeleteRolePrivilege200JSONResponse DeleteRolePrivilegeResponse200

func (response DeleteRolePrivilege200JSONResponse) VisitDeleteRolePrivilegeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRolePrivilege500JSONResponse DeleteRolePrivilegeResponse500

func (response DeleteRolePrivilege500JSONResponse) VisitDeleteRolePrivilegeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddRolePrivilegeRequestObject struct {
	RoleCode      string `json:"role_code"`
	PrivilegeCode string `json:"privilege_code"`
	Body          *AddRolePrivilegeJSONRequestBody
}

type AddRolePrivilegeResponseObject interface {
	VisitAddRolePrivilegeResponse(w http.ResponseWriter) error
}

type AddRolePrivilege200JSONResponse AddRolePrivilegeResponse200

func (response AddRolePrivilege200JSONResponse) VisitAddRolePrivilegeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddRolePrivilege500JSONResponse AddRolePrivilegeResponse500

func (response AddRolePrivilege500JSONResponse) VisitAddRolePrivilegeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRolePrivilegeRequestObject struct {
	RoleCode      string `json:"role_code"`
	PrivilegeCode string `json:"privilege_code"`
	Body          *UpdateRolePrivilegeJSONRequestBody
}

type UpdateRolePrivilegeResponseObject interface {
	VisitUpdateRolePrivilegeResponse(w http.ResponseWriter) error
}

type UpdateRolePrivilege200JSONResponse UpdateRolePrivilegeResponse200

func (response UpdateRolePrivilege200JSONResponse) VisitUpdateRolePrivilegeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRolePrivilege500JSONResponse UpdateRolePrivilegeResponse500

func (response UpdateRolePrivilege500JSONResponse) VisitUpdateRolePrivilegeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoleUserRequestObject struct {
	RoleCode string `json:"role_code"`
	Login    string `json:"login"`
}

type DeleteRoleUserResponseObject interface {
	VisitDeleteRoleUserResponse(w http.ResponseWriter) error
}

type DeleteRoleUser200JSONResponse DeleteRoleUserResponse200

func (response DeleteRoleUser200JSONResponse) VisitDeleteRoleUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoleUser500JSONResponse DeleteRoleUserResponse500

func (response DeleteRoleUser500JSONResponse) VisitDeleteRoleUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddRoleUserRequestObject struct {
	RoleCode string `json:"role_code"`
	Login    string `json:"login"`
	Body     *AddRoleUserJSONRequestBody
}

type AddRoleUserResponseObject interface {
	VisitAddRoleUserResponse(w http.ResponseWriter) error
}

type AddRoleUser200JSONResponse AddRoleUserResponse200

func (response AddRoleUser200JSONResponse) VisitAddRoleUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddRoleUser500JSONResponse AddRoleUserResponse500

func (response AddRoleUser500JSONResponse) VisitAddRoleUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoleUserRequestObject struct {
	RoleCode string `json:"role_code"`
	Login    string `json:"login"`
	Body     *UpdateRoleUserJSONRequestBody
}

type UpdateRoleUserResponseObject interface {
	VisitUpdateRoleUserResponse(w http.ResponseWriter) error
}

type UpdateRoleUser200JSONResponse UpdateRoleUserResponse200

func (response UpdateRoleUser200JSONResponse) VisitUpdateRoleUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoleUser500JSONResponse UpdateRoleUserResponse500

func (response UpdateRoleUser500JSONResponse) VisitUpdateRoleUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse GetUsersResponse200

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse GetUsersResponse500

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser200JSONResponse CreateUserResponse200

func (response CreateUser200JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse CreateUserResponse500

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	Login string `json:"login"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200JSONResponse DeleteUserResponse200

func (response DeleteUser200JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser500JSONResponse DeleteUserResponse500

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
	Login string `json:"login"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse GetUserResponse200

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser500JSONResponse GetUserResponse500

func (response GetUser500JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	Login string `json:"login"`
	Body  *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse UpdateUserResponse200

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser500JSONResponse UpdateUserResponse500

func (response UpdateUser500JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserPrivilegesRequestObject struct {
	Login string `json:"login"`
}

type GetUserPrivilegesResponseObject interface {
	VisitGetUserPrivilegesResponse(w http.ResponseWriter) error
}

type GetUserPrivileges200JSONResponse GetUserPrivilegesResponse200

func (response GetUserPrivileges200JSONResponse) VisitGetUserPrivilegesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserPrivileges500JSONResponse GetUserPrivilegesResponse500

func (response GetUserPrivileges500JSONResponse) VisitGetUserPrivilegesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRolesRequestObject struct {
	Login string `json:"login"`
}

type GetUserRolesResponseObject interface {
	VisitGetUserRolesResponse(w http.ResponseWriter) error
}

type GetUserRoles200JSONResponse GetUserRolesResponse200

func (response GetUserRoles200JSONResponse) VisitGetUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRoles500JSONResponse GetUserRolesResponse500

func (response GetUserRoles500JSONResponse) VisitGetUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSessionsRequestObject struct {
	Login string `json:"login"`
}

type GetUserSessionsResponseObject interface {
	VisitGetUserSessionsResponse(w http.ResponseWriter) error
}

type GetUserSessions200JSONResponse GetUserSessionsResponse200

func (response GetUserSessions200JSONResponse) VisitGetUserSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSessions500JSONResponse GetUserSessionsResponse500

func (response GetUserSessions500JSONResponse) VisitGetUserSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Login string `json:"login"`
	Body  *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse LoginResponse200

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login500JSONResponse LoginResponse500

func (response Login500JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserSessionRequestObject struct {
	Login     string `json:"login"`
	SessionId string `json:"session_id"`
}

type DeleteUserSessionResponseObject interface {
	VisitDeleteUserSessionResponse(w http.ResponseWriter) error
}

type DeleteUserSession200JSONResponse DeleteUserSessionResponse200

func (response DeleteUserSession200JSONResponse) VisitDeleteUserSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserSession500JSONResponse DeleteUserSessionResponse500

func (response DeleteUserSession500JSONResponse) VisitDeleteUserSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (PUT /v1/passchanges/{login})
	ChangePass(ctx context.Context, request ChangePassRequestObject) (ChangePassResponseObject, error)

	// (PUT /v1/passresets/{login})
	ResetPass(ctx context.Context, request ResetPassRequestObject) (ResetPassResponseObject, error)

	// (GET /v1/roles)
	GetRoles(ctx context.Context, request GetRolesRequestObject) (GetRolesResponseObject, error)

	// (POST /v1/roles)
	CreateRole(ctx context.Context, request CreateRoleRequestObject) (CreateRoleResponseObject, error)

	// (DELETE /v1/roles/{code})
	DeleteRole(ctx context.Context, request DeleteRoleRequestObject) (DeleteRoleResponseObject, error)

	// (GET /v1/roles/{code})
	GetRole(ctx context.Context, request GetRoleRequestObject) (GetRoleResponseObject, error)

	// (PUT /v1/roles/{code})
	UpdateRole(ctx context.Context, request UpdateRoleRequestObject) (UpdateRoleResponseObject, error)

	// (GET /v1/roles/{code}/privileges)
	GetRolePrivileges(ctx context.Context, request GetRolePrivilegesRequestObject) (GetRolePrivilegesResponseObject, error)

	// (GET /v1/roles/{code}/users)
	GetRoleUsers(ctx context.Context, request GetRoleUsersRequestObject) (GetRoleUsersResponseObject, error)

	// (DELETE /v1/roles/{role_code}/privileges/{privilege_code})
	DeleteRolePrivilege(ctx context.Context, request DeleteRolePrivilegeRequestObject) (DeleteRolePrivilegeResponseObject, error)

	// (POST /v1/roles/{role_code}/privileges/{privilege_code})
	AddRolePrivilege(ctx context.Context, request AddRolePrivilegeRequestObject) (AddRolePrivilegeResponseObject, error)

	// (PUT /v1/roles/{role_code}/privileges/{privilege_code})
	UpdateRolePrivilege(ctx context.Context, request UpdateRolePrivilegeRequestObject) (UpdateRolePrivilegeResponseObject, error)

	// (DELETE /v1/roles/{role_code}/users/{login})
	DeleteRoleUser(ctx context.Context, request DeleteRoleUserRequestObject) (DeleteRoleUserResponseObject, error)

	// (POST /v1/roles/{role_code}/users/{login})
	AddRoleUser(ctx context.Context, request AddRoleUserRequestObject) (AddRoleUserResponseObject, error)

	// (PUT /v1/roles/{role_code}/users/{login})
	UpdateRoleUser(ctx context.Context, request UpdateRoleUserRequestObject) (UpdateRoleUserResponseObject, error)

	// (GET /v1/users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)

	// (POST /v1/users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)

	// (DELETE /v1/users/{login})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)

	// (GET /v1/users/{login})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)

	// (PUT /v1/users/{login})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)

	// (GET /v1/users/{login}/privileges)
	GetUserPrivileges(ctx context.Context, request GetUserPrivilegesRequestObject) (GetUserPrivilegesResponseObject, error)

	// (GET /v1/users/{login}/roles)
	GetUserRoles(ctx context.Context, request GetUserRolesRequestObject) (GetUserRolesResponseObject, error)

	// (GET /v1/users/{login}/sessions)
	GetUserSessions(ctx context.Context, request GetUserSessionsRequestObject) (GetUserSessionsResponseObject, error)

	// (POST /v1/users/{login}/sessions)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (DELETE /v1/users/{login}/sessions/{session_id})
	DeleteUserSession(ctx context.Context, request DeleteUserSessionRequestObject) (DeleteUserSessionResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ChangePass operation middleware
func (sh *strictHandler) ChangePass(ctx echo.Context, login string) error {
	var request ChangePassRequestObject

	request.Login = login

	var body ChangePassJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangePass(ctx.Request().Context(), request.(ChangePassRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangePass")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ChangePassResponseObject); ok {
		return validResponse.VisitChangePassResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ResetPass operation middleware
func (sh *strictHandler) ResetPass(ctx echo.Context, login string) error {
	var request ResetPassRequestObject

	request.Login = login

	var body ResetPassJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ResetPass(ctx.Request().Context(), request.(ResetPassRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ResetPass")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ResetPassResponseObject); ok {
		return validResponse.VisitResetPassResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRoles operation middleware
func (sh *strictHandler) GetRoles(ctx echo.Context) error {
	var request GetRolesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoles(ctx.Request().Context(), request.(GetRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRolesResponseObject); ok {
		return validResponse.VisitGetRolesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateRole operation middleware
func (sh *strictHandler) CreateRole(ctx echo.Context) error {
	var request CreateRoleRequestObject

	var body CreateRoleJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRole(ctx.Request().Context(), request.(CreateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateRoleResponseObject); ok {
		return validResponse.VisitCreateRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRole operation middleware
func (sh *strictHandler) DeleteRole(ctx echo.Context, code string) error {
	var request DeleteRoleRequestObject

	request.Code = code

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRole(ctx.Request().Context(), request.(DeleteRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRoleResponseObject); ok {
		return validResponse.VisitDeleteRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRole operation middleware
func (sh *strictHandler) GetRole(ctx echo.Context, code string) error {
	var request GetRoleRequestObject

	request.Code = code

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRole(ctx.Request().Context(), request.(GetRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRoleResponseObject); ok {
		return validResponse.VisitGetRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateRole operation middleware
func (sh *strictHandler) UpdateRole(ctx echo.Context, code string) error {
	var request UpdateRoleRequestObject

	request.Code = code

	var body UpdateRoleJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRole(ctx.Request().Context(), request.(UpdateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRoleResponseObject); ok {
		return validResponse.VisitUpdateRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRolePrivileges operation middleware
func (sh *strictHandler) GetRolePrivileges(ctx echo.Context, code string) error {
	var request GetRolePrivilegesRequestObject

	request.Code = code

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRolePrivileges(ctx.Request().Context(), request.(GetRolePrivilegesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRolePrivileges")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRolePrivilegesResponseObject); ok {
		return validResponse.VisitGetRolePrivilegesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRoleUsers operation middleware
func (sh *strictHandler) GetRoleUsers(ctx echo.Context, code string) error {
	var request GetRoleUsersRequestObject

	request.Code = code

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoleUsers(ctx.Request().Context(), request.(GetRoleUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoleUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRoleUsersResponseObject); ok {
		return validResponse.VisitGetRoleUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRolePrivilege operation middleware
func (sh *strictHandler) DeleteRolePrivilege(ctx echo.Context, roleCode string, privilegeCode string) error {
	var request DeleteRolePrivilegeRequestObject

	request.RoleCode = roleCode
	request.PrivilegeCode = privilegeCode

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRolePrivilege(ctx.Request().Context(), request.(DeleteRolePrivilegeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRolePrivilege")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRolePrivilegeResponseObject); ok {
		return validResponse.VisitDeleteRolePrivilegeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddRolePrivilege operation middleware
func (sh *strictHandler) AddRolePrivilege(ctx echo.Context, roleCode string, privilegeCode string) error {
	var request AddRolePrivilegeRequestObject

	request.RoleCode = roleCode
	request.PrivilegeCode = privilegeCode

	var body AddRolePrivilegeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddRolePrivilege(ctx.Request().Context(), request.(AddRolePrivilegeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddRolePrivilege")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddRolePrivilegeResponseObject); ok {
		return validResponse.VisitAddRolePrivilegeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateRolePrivilege operation middleware
func (sh *strictHandler) UpdateRolePrivilege(ctx echo.Context, roleCode string, privilegeCode string) error {
	var request UpdateRolePrivilegeRequestObject

	request.RoleCode = roleCode
	request.PrivilegeCode = privilegeCode

	var body UpdateRolePrivilegeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRolePrivilege(ctx.Request().Context(), request.(UpdateRolePrivilegeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRolePrivilege")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRolePrivilegeResponseObject); ok {
		return validResponse.VisitUpdateRolePrivilegeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRoleUser operation middleware
func (sh *strictHandler) DeleteRoleUser(ctx echo.Context, roleCode string, login string) error {
	var request DeleteRoleUserRequestObject

	request.RoleCode = roleCode
	request.Login = login

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRoleUser(ctx.Request().Context(), request.(DeleteRoleUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRoleUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRoleUserResponseObject); ok {
		return validResponse.VisitDeleteRoleUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddRoleUser operation middleware
func (sh *strictHandler) AddRoleUser(ctx echo.Context, roleCode string, login string) error {
	var request AddRoleUserRequestObject

	request.RoleCode = roleCode
	request.Login = login

	var body AddRoleUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddRoleUser(ctx.Request().Context(), request.(AddRoleUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddRoleUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddRoleUserResponseObject); ok {
		return validResponse.VisitAddRoleUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateRoleUser operation middleware
func (sh *strictHandler) UpdateRoleUser(ctx echo.Context, roleCode string, login string) error {
	var request UpdateRoleUserRequestObject

	request.RoleCode = roleCode
	request.Login = login

	var body UpdateRoleUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRoleUser(ctx.Request().Context(), request.(UpdateRoleUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRoleUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRoleUserResponseObject); ok {
		return validResponse.VisitUpdateRoleUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx echo.Context) error {
	var request GetUsersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.Request().Context(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		return validResponse.VisitGetUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx echo.Context) error {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.Request().Context(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		return validResponse.VisitCreateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx echo.Context, login string) error {
	var request DeleteUserRequestObject

	request.Login = login

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx.Request().Context(), request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		return validResponse.VisitDeleteUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx echo.Context, login string) error {
	var request GetUserRequestObject

	request.Login = login

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.Request().Context(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		return validResponse.VisitGetUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx echo.Context, login string) error {
	var request UpdateUserRequestObject

	request.Login = login

	var body UpdateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.Request().Context(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		return validResponse.VisitUpdateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserPrivileges operation middleware
func (sh *strictHandler) GetUserPrivileges(ctx echo.Context, login string) error {
	var request GetUserPrivilegesRequestObject

	request.Login = login

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserPrivileges(ctx.Request().Context(), request.(GetUserPrivilegesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserPrivileges")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserPrivilegesResponseObject); ok {
		return validResponse.VisitGetUserPrivilegesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserRoles operation middleware
func (sh *strictHandler) GetUserRoles(ctx echo.Context, login string) error {
	var request GetUserRolesRequestObject

	request.Login = login

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserRoles(ctx.Request().Context(), request.(GetUserRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserRolesResponseObject); ok {
		return validResponse.VisitGetUserRolesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserSessions operation middleware
func (sh *strictHandler) GetUserSessions(ctx echo.Context, login string) error {
	var request GetUserSessionsRequestObject

	request.Login = login

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserSessions(ctx.Request().Context(), request.(GetUserSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserSessionsResponseObject); ok {
		return validResponse.VisitGetUserSessionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context, login string) error {
	var request LoginRequestObject

	request.Login = login

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUserSession operation middleware
func (sh *strictHandler) DeleteUserSession(ctx echo.Context, login string, sessionId string) error {
	var request DeleteUserSessionRequestObject

	request.Login = login
	request.SessionId = sessionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserSession(ctx.Request().Context(), request.(DeleteUserSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUserSessionResponseObject); ok {
		return validResponse.VisitDeleteUserSessionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdX28buRH/KgLbR9mSXRiH6i1tiiLoHRIkdw9pYBgbibb3LO/ucankAkNAbF9bFCku",
	"RdGHQ4u2aPsFdE4EK8lZ+QrDb3Qg9/8u959Py6WcPEVQKHI485s/nBnSJ2hoHzu2hS3qosEJcoeH+NgQ",
	"H2+NRvftMb5HzCfmGB/g+/irCXYp/y+H2A4m1MRioDEe20/xiH8c4X1jMqZoQMkEdxF95mA0QI9te4wN",
	"C02nXUTwVxOT8NGPwh/uhiPtx1/iIUXTrmR117EtF2/3+1kKXGrQifj0c4L30QD9rBdtq+fvqRdM8UCM",
	"vnuUocefpg45O6si5zeE2OQaFH3hYpIrmZFB8Z5p8Y/4a+PYGfMptvtbn2z0tzb6W6iL9m1ybFA0EENR",
	"FzkGpZhYaIAePnz4cOOzzzZu30bh6i4lpnXAVxcz2xO68qlTDAh2EFuxlBk6ACVOSXsY+fWhYR3ge4br",
	"5kJkKIb4yusOielQ0+ZCgn/BEi7YC3jTgfcwY89hCe/YX+KCdQzXfWqTkQwgwwkh2KKSef8Hc3jLztmf",
	"YXGtuVPbDxbqhlsp40Sr+MgS0iI8CDYo5nDNhcfjsT08qmTbu0k5Z8T+b3gPC3YKM7iCBcw7ntBhIQOP",
	"ZRxjKSJncAkXFaZI8UDMlySwG26tjDMFcBkZ1CiVkT3GfMrVQqvrrV2N9rYRVuij6iBsbB+YEmyJr7kl",
	"EVYELrnhghk7gzm8Yy9rAOw/Ak9XsIR5BxbwA3tZa9bQZslmDq1c0ZT1zZ8PbY8z3fjvyvFd6i6r4JtP",
	"0gK+9XCwt/EYe7qmS6BaQJEObNKGOzoxRYOwVU5M28zRhjG6MeUBdl3TtrThTYqe9lj0W0wTts+t5N9M",
	"io/dKoFcOC9fy1/cIMR4ptQD5m6ydb6vX7ScIrx1DnJtWjFogwitbbwmttY6o1fMZB0YrAdzuZibsL+J",
	"edtmt3yTrfN9/U5zKcLb5+BqTUMwpQ541ctE+CHjCnntz6gDq9Oba53bK4a0DjzWgLmf2gemlZvZrJYO",
	"vFbWLxxYQNVPjcT9CW4Nh9h1lQo4sYH2pHsfu5i2UDxLF7gKyloxElvNBGToaFVqcdxmuxXE95/bR1hU",
	"EjJJfIL3CXYP8wakWxhis6V+W0RcfG9ZVNkjUZzA1uSYr4HFsF1ZFT5ZcSvBEZ82+ZtyEu8eldNnH6kj",
	"jodSRSWkbM0ooLYmfVGNqBLhtSuMyWxSUU+NVlsqatkJcw03oQ8lVmy8JhtTlbmKnSxBEJvVOlH2Gu0Z",
	"sp6Kv7HnMBf1SnYKS7iE116R3Ptizk7ZKSxEoTzBpF9ubPU3trY/738y2O4PdvqbO9u/T3Nsg5piHxku",
	"4K8dvtUygmDBTtkZzNmfYB6SJBziW5h14DXM4Y0YcdEsuabMTX8n1r9iZ7Bg38CCk8TOYMmep+koFrXJ",
	"vXhMQAnmyKT8hTMyMlW68va6n9BPJ12x1ZihgKL2ooeIqCoNCze6BybOinXL6mdp1wFSH3s1ZfzQxAjp",
	"kYX06KnaMJW1P000NskNSbnpWM+EdJb2FtEgjaYLAbDiqLVQyomCTO4xUW6P1u000PzRqqr5DCoKHxmu",
	"guHc9ODhhJj02QOu1L4KYoN4qik0Xeig91U4wSGlDpry35vWvu3Jx6LGkPNq2kXUpIJXxoQebpijzq17",
	"d1AXPcHEO/2hrc0+36XtYMtwTDRAv9jsb255/DsUNPSebPUcw3W9/KDbOxE6OxW4mMjOZP+FH8QRbBbP",
	"SeY5An56Q2J9YvAJ7ozQINa8LgghxjGmmLho8Ciz2D9hCa9gAVdFjoZjUmwoENEgNDyREL1mYM+iygS+",
	"6w3GLv2VPXoWMNq/e2A4ztgcih30vnQ9KEVTFZnu7N0JIUxpIn/GOcvO2HP2ogOXMIP3nLs80M/sRODT",
	"cwpCir5jXDnJkduVkH33dxxbO40uvSNf+o7Ftd8Ydx5g8gSTTuQTAzUTaAoU7NEuly81DjjI0FP8GO3y",
	"sQH2CXYxrQT97z2JVIG+gGYS+GF+++bjPlP10B720iKIEtRLyx6Ngp7YY4+BB5jmxfnsPMi1wbzDTv2c",
	"w1uYBcmCObzJIDxoIUINCkrWeaVETrL+qGbE1EWO7cotUCwtm8zbpHxseH0HNeTYMre+9Hds0utYahyb",
	"9DZV8zreO+Gh69RD0hhT2an+/wJP7yJdz8NU1N1f6r/+AUt43WHn3tTsJY8DYQlv4pNL3JcfZ9f0Xg3B",
	"RX7dRAlc5BdMmrI1VZ2Ab3eu2Av2h3yU+FayKkTWBw+S5nSVbkeJ15GGvd/BpX/mKzURUSK0ovxhEUze",
	"sJFYvQfMFnm094DyYowSFMtrKco8YM8J26zrxL1CTgu4gIVwkK/EYwNlpi/q6L6xRlDema/SHMrb5tXh",
	"aeIKkdaBUk6CrBxQok/1xmIp01isEkaZFmAVCOL/7KXNUu8k/LxXP2iXGKpFlUg+qrysAl7hxmphrJsX",
	"G0j2JF83yTkNTxDSbhnFRwlpf4zi/MXfYQnfwwwurg3d9BNaHzRuVx/U5j3Xpn1oW/TSmxJFK3rbre3z",
	"Wj0Vk7TUfdSyho6O66doJS2gig+TCtUtN4YTR4F49bB2qrV6CTH5wopWaqm4Ztl4zJZuPFMcrqV7xzSI",
	"1Mrg+m1etPahY7WxOC3e4rkuIVorepXzoKouifTqDiDZavxRqZoJy9ZKr/Jb4RUHY2q0y4/DaidgEz0s",
	"+dlYWRI2SMA2mQptLQ2qKAVauaelsimMnvBstMdlrWyB/ElWhT0u6m3AtU5eNQ9clXxt5P8yjS+vYHkD",
	"TkUtnohUBW7X6oWpDCbf2urW/tusU2vLp+mVgK0V3tcFSbaJRpnBaSoKX8MIvMXouz2vu8rGmrp2tEaj",
	"zY2yqO123+Q/WqkQdfVvMISXFmrDLLjR8CH57LYuWEhfmFSIK9d/crFmYiF45KU+uII3Hj8sfMme7VQJ",
	"MdnLmorTHn9l50JwyWeD/ggLCVY+Df8uy42+NJh4CFP7oC/zQKYSAGdetWzBOPZO/E975qj5NsWYvmqk",
	"Al3ZK2Cb6Qe/JEtFrNMwuyP5iyCKkzySvwHSEMLFYP5rD0kTMkYD1EOxkVkRixqCjyt2zr5lZ+yUvezA",
	"a3ERnH0joHzl2XUO/UjsfNHp7vTHAAAA//87hXpuKnUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

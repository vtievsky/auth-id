// Package serverhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package serverhttp

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ResponseStatusErrorCode.
const (
	Error ResponseStatusErrorCode = "error"
)

// Defines values for ResponseStatusOkCode.
const (
	Ok ResponseStatusOkCode = "ok"
)

// AddRolePrivilegeRequest defines model for AddRolePrivilegeRequest.
type AddRolePrivilegeRequest struct {
	Allowed bool `json:"allowed"`
}

// AddRolePrivilegeResponse200 defines model for AddRolePrivilegeResponse200.
type AddRolePrivilegeResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// AddRolePrivilegeResponse500 defines model for AddRolePrivilegeResponse500.
type AddRolePrivilegeResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// AddRoleUserRequest defines model for AddRoleUserRequest.
type AddRoleUserRequest struct {
	DateIn  openapi_types.Date `json:"date_in"`
	DateOut openapi_types.Date `json:"date_out"`
}

// AddRoleUserResponse200 defines model for AddRoleUserResponse200.
type AddRoleUserResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// AddRoleUserResponse500 defines model for AddRoleUserResponse500.
type AddRoleUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// ChangePassRequest defines model for ChangePassRequest.
type ChangePassRequest struct {
	// Changed Новый пароль
	Changed string `json:"changed"`

	// Current Текущий пароль
	Current string `json:"current"`
}

// ChangePassResponse200 defines model for ChangePassResponse200.
type ChangePassResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// ChangePassResponse500 defines model for ChangePassResponse500.
type ChangePassResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	Blocked bool `json:"blocked"`

	// Description Описание роли
	Description string `json:"description"`

	// Name Название роли
	Name string `json:"name"`
}

// CreateRoleResponse200 defines model for CreateRoleResponse200.
type CreateRoleResponse200 struct {
	Data   Role             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// CreateRoleResponse500 defines model for CreateRoleResponse500.
type CreateRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Blocked bool `json:"blocked"`

	// Login login пользователя
	Login string `json:"login"`

	// Name Полное имя пользователя
	Name string `json:"name"`

	// Password Пароль пользователя
	Password string `json:"password"`
}

// CreateUserResponse200 defines model for CreateUserResponse200.
type CreateUserResponse200 struct {
	Data   User             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// CreateUserResponse500 defines model for CreateUserResponse500.
type CreateUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteRolePrivilegeResponse200 defines model for DeleteRolePrivilegeResponse200.
type DeleteRolePrivilegeResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteRolePrivilegeResponse500 defines model for DeleteRolePrivilegeResponse500.
type DeleteRolePrivilegeResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteRoleResponse200 defines model for DeleteRoleResponse200.
type DeleteRoleResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteRoleResponse500 defines model for DeleteRoleResponse500.
type DeleteRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteRoleUserResponse200 defines model for DeleteRoleUserResponse200.
type DeleteRoleUserResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteRoleUserResponse500 defines model for DeleteRoleUserResponse500.
type DeleteRoleUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteUserResponse200 defines model for DeleteUserResponse200.
type DeleteUserResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteUserResponse500 defines model for DeleteUserResponse500.
type DeleteUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// DeleteUserSessionResponse200 defines model for DeleteUserSessionResponse200.
type DeleteUserSessionResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// DeleteUserSessionResponse500 defines model for DeleteUserSessionResponse500.
type DeleteUserSessionResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetPrivilegesResponse200 defines model for GetPrivilegesResponse200.
type GetPrivilegesResponse200 struct {
	Data   []Privilege      `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetPrivilegesResponse500 defines model for GetPrivilegesResponse500.
type GetPrivilegesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRolePrivilegesResponse200 defines model for GetRolePrivilegesResponse200.
type GetRolePrivilegesResponse200 struct {
	Data   []RolePrivilege  `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRolePrivilegesResponse500 defines model for GetRolePrivilegesResponse500.
type GetRolePrivilegesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRoleResponse200 defines model for GetRoleResponse200.
type GetRoleResponse200 struct {
	Data   Role             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRoleResponse500 defines model for GetRoleResponse500.
type GetRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRoleUsersResponse200 defines model for GetRoleUsersResponse200.
type GetRoleUsersResponse200 struct {
	Data   []RoleUser       `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRoleUsersResponse500 defines model for GetRoleUsersResponse500.
type GetRoleUsersResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetRolesResponse200 defines model for GetRolesResponse200.
type GetRolesResponse200 struct {
	Data   []Role           `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetRolesResponse500 defines model for GetRolesResponse500.
type GetRolesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUserPrivilegesResponse200 defines model for GetUserPrivilegesResponse200.
type GetUserPrivilegesResponse200 struct {
	Data   []UserPrivilege  `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUserPrivilegesResponse500 defines model for GetUserPrivilegesResponse500.
type GetUserPrivilegesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUserResponse200 defines model for GetUserResponse200.
type GetUserResponse200 struct {
	Data   User             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUserResponse500 defines model for GetUserResponse500.
type GetUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUserRolesResponse200 defines model for GetUserRolesResponse200.
type GetUserRolesResponse200 struct {
	Data   []UserRole       `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUserRolesResponse500 defines model for GetUserRolesResponse500.
type GetUserRolesResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUserSessionsResponse200 defines model for GetUserSessionsResponse200.
type GetUserSessionsResponse200 struct {
	Data   []Session        `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUserSessionsResponse500 defines model for GetUserSessionsResponse500.
type GetUserSessionsResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GetUsersResponse200 defines model for GetUsersResponse200.
type GetUsersResponse200 struct {
	Data   []User           `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// GetUsersResponse500 defines model for GetUsersResponse500.
type GetUsersResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Password Пароль
	Password string `json:"password"`
}

// LoginResponse200 defines model for LoginResponse200.
type LoginResponse200 struct {
	Data   ResponseAccess   `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// LoginResponse500 defines model for LoginResponse500.
type LoginResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// Privilege defines model for Privilege.
type Privilege struct {
	Code        string `json:"code"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// ResetPassRequest defines model for ResetPassRequest.
type ResetPassRequest struct {
	// Changed Новый пароль
	Changed string `json:"changed"`
}

// ResetPassResponse200 defines model for ResetPassResponse200.
type ResetPassResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// ResetPassResponse500 defines model for ResetPassResponse500.
type ResetPassResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// ResponseAccess defines model for ResponseAccess.
type ResponseAccess struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

// ResponseStatusError defines model for ResponseStatusError.
type ResponseStatusError struct {
	Code        ResponseStatusErrorCode `json:"code"`
	Description string                  `json:"description"`
}

// ResponseStatusErrorCode defines model for ResponseStatusError.Code.
type ResponseStatusErrorCode string

// ResponseStatusOk defines model for ResponseStatusOk.
type ResponseStatusOk struct {
	Code        ResponseStatusOkCode `json:"code"`
	Description string               `json:"description"`
}

// ResponseStatusOkCode defines model for ResponseStatusOk.Code.
type ResponseStatusOkCode string

// Role defines model for Role.
type Role struct {
	Blocked     bool   `json:"blocked"`
	Code        string `json:"code"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// RolePrivilege defines model for RolePrivilege.
type RolePrivilege struct {
	Allowed     bool   `json:"allowed"`
	Code        string `json:"code"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// RoleUser defines model for RoleUser.
type RoleUser struct {
	DateIn  openapi_types.Date `json:"date_in"`
	DateOut openapi_types.Date `json:"date_out"`
	Login   string             `json:"login"`
	Name    string             `json:"name"`
}

// Session defines model for Session.
type Session struct {
	// CreatedAt Время создания сессии
	CreatedAt time.Time `json:"created_at"`

	// ExpiredAt Время истечения срока действия сессии
	ExpiredAt time.Time `json:"expired_at"`

	// Id Идентификатор сессии
	Id string `json:"id"`
}

// UpdateRolePrivilegeRequest defines model for UpdateRolePrivilegeRequest.
type UpdateRolePrivilegeRequest struct {
	Allowed bool `json:"allowed"`
}

// UpdateRolePrivilegeResponse200 defines model for UpdateRolePrivilegeResponse200.
type UpdateRolePrivilegeResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// UpdateRolePrivilegeResponse500 defines model for UpdateRolePrivilegeResponse500.
type UpdateRolePrivilegeResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	Blocked bool `json:"blocked"`

	// Description Описание роли
	Description string `json:"description"`

	// Name Название роли
	Name string `json:"name"`
}

// UpdateRoleResponse200 defines model for UpdateRoleResponse200.
type UpdateRoleResponse200 struct {
	Data   Role             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// UpdateRoleResponse500 defines model for UpdateRoleResponse500.
type UpdateRoleResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// UpdateRoleUserRequest defines model for UpdateRoleUserRequest.
type UpdateRoleUserRequest struct {
	DateIn  openapi_types.Date `json:"date_in"`
	DateOut openapi_types.Date `json:"date_out"`
}

// UpdateRoleUserResponse200 defines model for UpdateRoleUserResponse200.
type UpdateRoleUserResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// UpdateRoleUserResponse500 defines model for UpdateRoleUserResponse500.
type UpdateRoleUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Blocked bool `json:"blocked"`

	// Name Полное имя пользователя
	Name string `json:"name"`
}

// UpdateUserResponse200 defines model for UpdateUserResponse200.
type UpdateUserResponse200 struct {
	Data   User             `json:"data"`
	Status ResponseStatusOk `json:"status"`
}

// UpdateUserResponse500 defines model for UpdateUserResponse500.
type UpdateUserResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// User defines model for User.
type User struct {
	Blocked bool   `json:"blocked"`
	Login   string `json:"login"`
	Name    string `json:"name"`
}

// UserPrivilege defines model for UserPrivilege.
type UserPrivilege struct {
	Code        string             `json:"code"`
	DateIn      openapi_types.Date `json:"date_in"`
	DateOut     openapi_types.Date `json:"date_out"`
	Description string             `json:"description"`
	Name        string             `json:"name"`
}

// UserRole defines model for UserRole.
type UserRole struct {
	Code        string             `json:"code"`
	DateIn      openapi_types.Date `json:"date_in"`
	DateOut     openapi_types.Date `json:"date_out"`
	Description string             `json:"description"`
	Name        string             `json:"name"`
}

// GetPrivilegesParams defines parameters for GetPrivileges.
type GetPrivilegesParams struct {
	// PageSize Размер страницы
	PageSize uint32 `form:"pageSize" json:"pageSize"`

	// Offset Смещение страницы
	Offset uint32 `form:"offset" json:"offset"`
}

// GetRolesParams defines parameters for GetRoles.
type GetRolesParams struct {
	// PageSize Размер страницы
	PageSize uint32 `form:"pageSize" json:"pageSize"`

	// Offset Смещение страницы
	Offset uint32 `form:"offset" json:"offset"`
}

// GetRolePrivilegesParams defines parameters for GetRolePrivileges.
type GetRolePrivilegesParams struct {
	// PageSize Размер страницы
	PageSize uint32 `form:"pageSize" json:"pageSize"`

	// Offset Смещение страницы
	Offset uint32 `form:"offset" json:"offset"`
}

// GetRoleUsersParams defines parameters for GetRoleUsers.
type GetRoleUsersParams struct {
	// PageSize Размер страницы
	PageSize uint32 `form:"pageSize" json:"pageSize"`

	// Offset Смещение страницы
	Offset uint32 `form:"offset" json:"offset"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// PageSize Размер страницы
	PageSize uint32 `form:"pageSize" json:"pageSize"`

	// Offset Смещение страницы
	Offset uint32 `form:"offset" json:"offset"`
}

// GetUserPrivilegesParams defines parameters for GetUserPrivileges.
type GetUserPrivilegesParams struct {
	// PageSize Размер страницы
	PageSize uint32 `form:"pageSize" json:"pageSize"`

	// Offset Смещение страницы
	Offset uint32 `form:"offset" json:"offset"`
}

// GetUserRolesParams defines parameters for GetUserRoles.
type GetUserRolesParams struct {
	// PageSize Размер страницы
	PageSize uint32 `form:"pageSize" json:"pageSize"`

	// Offset Смещение страницы
	Offset uint32 `form:"offset" json:"offset"`
}

// GetUserSessionsParams defines parameters for GetUserSessions.
type GetUserSessionsParams struct {
	// PageSize Размер страницы
	PageSize uint32 `form:"pageSize" json:"pageSize"`

	// Offset Смещение страницы
	Offset uint32 `form:"offset" json:"offset"`
}

// ChangePassJSONRequestBody defines body for ChangePass for application/json ContentType.
type ChangePassJSONRequestBody = ChangePassRequest

// ResetPassJSONRequestBody defines body for ResetPass for application/json ContentType.
type ResetPassJSONRequestBody = ResetPassRequest

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequest

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRoleRequest

// AddRolePrivilegeJSONRequestBody defines body for AddRolePrivilege for application/json ContentType.
type AddRolePrivilegeJSONRequestBody = AddRolePrivilegeRequest

// UpdateRolePrivilegeJSONRequestBody defines body for UpdateRolePrivilege for application/json ContentType.
type UpdateRolePrivilegeJSONRequestBody = UpdateRolePrivilegeRequest

// AddRoleUserJSONRequestBody defines body for AddRoleUser for application/json ContentType.
type AddRoleUserJSONRequestBody = AddRoleUserRequest

// UpdateRoleUserJSONRequestBody defines body for UpdateRoleUser for application/json ContentType.
type UpdateRoleUserJSONRequestBody = UpdateRoleUserRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (PUT /v1/passchanges/{login})
	ChangePass(ctx echo.Context, login string) error

	// (PUT /v1/passresets/{login})
	ResetPass(ctx echo.Context, login string) error

	// (GET /v1/privileges)
	GetPrivileges(ctx echo.Context, params GetPrivilegesParams) error

	// (GET /v1/roles)
	GetRoles(ctx echo.Context, params GetRolesParams) error

	// (POST /v1/roles)
	CreateRole(ctx echo.Context) error

	// (DELETE /v1/roles/{code})
	DeleteRole(ctx echo.Context, code string) error

	// (GET /v1/roles/{code})
	GetRole(ctx echo.Context, code string) error

	// (PUT /v1/roles/{code})
	UpdateRole(ctx echo.Context, code string) error

	// (GET /v1/roles/{code}/privileges)
	GetRolePrivileges(ctx echo.Context, code string, params GetRolePrivilegesParams) error

	// (GET /v1/roles/{code}/users)
	GetRoleUsers(ctx echo.Context, code string, params GetRoleUsersParams) error

	// (DELETE /v1/roles/{role_code}/privileges/{privilege_code})
	DeleteRolePrivilege(ctx echo.Context, roleCode string, privilegeCode string) error

	// (POST /v1/roles/{role_code}/privileges/{privilege_code})
	AddRolePrivilege(ctx echo.Context, roleCode string, privilegeCode string) error

	// (PUT /v1/roles/{role_code}/privileges/{privilege_code})
	UpdateRolePrivilege(ctx echo.Context, roleCode string, privilegeCode string) error

	// (DELETE /v1/roles/{role_code}/users/{login})
	DeleteRoleUser(ctx echo.Context, roleCode string, login string) error

	// (POST /v1/roles/{role_code}/users/{login})
	AddRoleUser(ctx echo.Context, roleCode string, login string) error

	// (PUT /v1/roles/{role_code}/users/{login})
	UpdateRoleUser(ctx echo.Context, roleCode string, login string) error

	// (GET /v1/users)
	GetUsers(ctx echo.Context, params GetUsersParams) error

	// (POST /v1/users)
	CreateUser(ctx echo.Context) error

	// (DELETE /v1/users/{login})
	DeleteUser(ctx echo.Context, login string) error

	// (GET /v1/users/{login})
	GetUser(ctx echo.Context, login string) error

	// (PUT /v1/users/{login})
	UpdateUser(ctx echo.Context, login string) error

	// (GET /v1/users/{login}/privileges)
	GetUserPrivileges(ctx echo.Context, login string, params GetUserPrivilegesParams) error

	// (GET /v1/users/{login}/roles)
	GetUserRoles(ctx echo.Context, login string, params GetUserRolesParams) error

	// (GET /v1/users/{login}/sessions)
	GetUserSessions(ctx echo.Context, login string, params GetUserSessionsParams) error

	// (POST /v1/users/{login}/sessions)
	Login(ctx echo.Context, login string) error

	// (DELETE /v1/users/{login}/sessions/{session_id})
	DeleteUserSession(ctx echo.Context, login string, sessionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ChangePass converts echo context to params.
func (w *ServerInterfaceWrapper) ChangePass(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChangePass(ctx, login)
	return err
}

// ResetPass converts echo context to params.
func (w *ServerInterfaceWrapper) ResetPass(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResetPass(ctx, login)
	return err
}

// GetPrivileges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPrivileges(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPrivilegesParams
	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPrivileges(ctx, params)
	return err
}

// GetRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRolesParams
	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoles(ctx, params)
	return err
}

// CreateRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRole(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRole(ctx)
	return err
}

// DeleteRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRole(ctx, code)
	return err
}

// GetRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRole(ctx, code)
	return err
}

// UpdateRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRole(ctx, code)
	return err
}

// GetRolePrivileges converts echo context to params.
func (w *ServerInterfaceWrapper) GetRolePrivileges(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRolePrivilegesParams
	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRolePrivileges(ctx, code, params)
	return err
}

// GetRoleUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoleUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRoleUsersParams
	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoleUsers(ctx, code, params)
	return err
}

// DeleteRolePrivilege converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRolePrivilege(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "privilege_code" -------------
	var privilegeCode string

	err = runtime.BindStyledParameterWithOptions("simple", "privilege_code", ctx.Param("privilege_code"), &privilegeCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter privilege_code: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRolePrivilege(ctx, roleCode, privilegeCode)
	return err
}

// AddRolePrivilege converts echo context to params.
func (w *ServerInterfaceWrapper) AddRolePrivilege(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "privilege_code" -------------
	var privilegeCode string

	err = runtime.BindStyledParameterWithOptions("simple", "privilege_code", ctx.Param("privilege_code"), &privilegeCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter privilege_code: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddRolePrivilege(ctx, roleCode, privilegeCode)
	return err
}

// UpdateRolePrivilege converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRolePrivilege(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "privilege_code" -------------
	var privilegeCode string

	err = runtime.BindStyledParameterWithOptions("simple", "privilege_code", ctx.Param("privilege_code"), &privilegeCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter privilege_code: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRolePrivilege(ctx, roleCode, privilegeCode)
	return err
}

// DeleteRoleUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRoleUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRoleUser(ctx, roleCode, login)
	return err
}

// AddRoleUser converts echo context to params.
func (w *ServerInterfaceWrapper) AddRoleUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddRoleUser(ctx, roleCode, login)
	return err
}

// UpdateRoleUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRoleUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_code" -------------
	var roleCode string

	err = runtime.BindStyledParameterWithOptions("simple", "role_code", ctx.Param("role_code"), &roleCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_code: %s", err))
	}

	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRoleUser(ctx, roleCode, login)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, login)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, login)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, login)
	return err
}

// GetUserPrivileges converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserPrivileges(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserPrivilegesParams
	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserPrivileges(ctx, login, params)
	return err
}

// GetUserRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserRoles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserRolesParams
	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserRoles(ctx, login, params)
	return err
}

// GetUserSessions converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserSessions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSessionsParams
	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserSessions(ctx, login, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx, login)
	return err
}

// DeleteUserSession converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameterWithOptions("simple", "login", ctx.Param("login"), &login, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", ctx.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter session_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUserSession(ctx, login, sessionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/v1/passchanges/:login", wrapper.ChangePass)
	router.PUT(baseURL+"/v1/passresets/:login", wrapper.ResetPass)
	router.GET(baseURL+"/v1/privileges", wrapper.GetPrivileges)
	router.GET(baseURL+"/v1/roles", wrapper.GetRoles)
	router.POST(baseURL+"/v1/roles", wrapper.CreateRole)
	router.DELETE(baseURL+"/v1/roles/:code", wrapper.DeleteRole)
	router.GET(baseURL+"/v1/roles/:code", wrapper.GetRole)
	router.PUT(baseURL+"/v1/roles/:code", wrapper.UpdateRole)
	router.GET(baseURL+"/v1/roles/:code/privileges", wrapper.GetRolePrivileges)
	router.GET(baseURL+"/v1/roles/:code/users", wrapper.GetRoleUsers)
	router.DELETE(baseURL+"/v1/roles/:role_code/privileges/:privilege_code", wrapper.DeleteRolePrivilege)
	router.POST(baseURL+"/v1/roles/:role_code/privileges/:privilege_code", wrapper.AddRolePrivilege)
	router.PUT(baseURL+"/v1/roles/:role_code/privileges/:privilege_code", wrapper.UpdateRolePrivilege)
	router.DELETE(baseURL+"/v1/roles/:role_code/users/:login", wrapper.DeleteRoleUser)
	router.POST(baseURL+"/v1/roles/:role_code/users/:login", wrapper.AddRoleUser)
	router.PUT(baseURL+"/v1/roles/:role_code/users/:login", wrapper.UpdateRoleUser)
	router.GET(baseURL+"/v1/users", wrapper.GetUsers)
	router.POST(baseURL+"/v1/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/v1/users/:login", wrapper.DeleteUser)
	router.GET(baseURL+"/v1/users/:login", wrapper.GetUser)
	router.PUT(baseURL+"/v1/users/:login", wrapper.UpdateUser)
	router.GET(baseURL+"/v1/users/:login/privileges", wrapper.GetUserPrivileges)
	router.GET(baseURL+"/v1/users/:login/roles", wrapper.GetUserRoles)
	router.GET(baseURL+"/v1/users/:login/sessions", wrapper.GetUserSessions)
	router.POST(baseURL+"/v1/users/:login/sessions", wrapper.Login)
	router.DELETE(baseURL+"/v1/users/:login/sessions/:session_id", wrapper.DeleteUserSession)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
